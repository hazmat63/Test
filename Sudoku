#include<stdio.h>
#include<stdbool.h>
bool rowc(int grid[5][5],int row, int n)
{
	for(int col=0; col<5;col++)
	if(grid[row][col]==n)
	return true;
   return false;
}
bool colc(int grid[5][5], int col, int n)
{
	for(int row=0; row<5;row++)
	if(grid[row][col]==n)
	return true;
   return false;
}
bool boxc(int grid[5][5], int brow,int bcol, int n)
{
	for(int row=1; row<4;row++)
	if(grid[row][2]==n)
	return 1;
	for(int col=1; col<4;col++)
	if(grid[2][col]==n)
	return true;
   return false;
}
bool boxtl(int grid[5][5], int brow,int bcol, int n)
{
	for(int col=0; col<3;col++)
	if(grid[0][col]==n)
	return 1;
	for(int col=1; col<2;col++)
	if(grid[0][col]==n)
	return true;
   return false;
}
bool boxbr(int grid[5][5], int brow,int bcol, int n)
{
	for(int col=3; col<5;col++)
	if(grid[3][col]==n)
	return 1;
	for(int col=2; col<5;col++)
	if(grid[4][col]==n)
	return true;
   return false;
}
bool boxtr(int grid[5][5], int brow,int bcol, int n)
{
	for(int row=0; row<2;row++)
	if(grid[row][3]==n)
	return 1;
	for(int row=0; row<3;row++)
	if(grid[row][4]==n)
	return true;
   return false;
}
bool boxbl(int grid[5][5], int brow,int bcol, int n)
{
	for(int row=2; row<5;row++)
	if(grid[row][0]==n)
	return 1;
	for(int row=3; row<5;row++)
	if(grid[row][1]==n)
	return true;
   return false;
}
bool solution(int grid[5][5], int brow,int bcol, int n)
{
	return !rowc(grid, brow,n) &&
	!colc(grid, brow,n) && 
	!boxc(grid, brow,bcol,n) &&
	!boxbl(grid, brow,bcol,n)&&
	!boxtr(grid, brow,bcol,n) &&
	!boxtl(grid, brow,bcol,n) &&
	!boxbr(grid, brow,bcol,n) ;
}
bool SolveSudoku(int grid[5][5])  
{  
    int row, col;  
  
   for (int num = 1; num <= 5; num++)  
    {  
if (solution(grid, row, col, num))  
{
    grid[row][col] = num;  
    if (Sudoku(grid))  
	return true;    
}  
}  
    return 0;   
}  
int main()
{ int grid[5][5];
printf("Enter numbers(Starting from first Row then second row and so on)");
for(int i=0;i<5;i++)
for(int j=0;j<5;j++)
scanf("%d",&grid[i][j]);
printf("Sudoko is");
if(Sudoku(grid)==true);
  printf("True");
else
  printf("False");
return 0;
}
